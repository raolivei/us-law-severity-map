name: Terraform Plan and Apply on PR

on:
    pull_request:
        branches:
            - main
        paths:
            - "terraform/**"
        types: [opened, synchronize, labeled]

permissions:
    contents: read
    pull-requests: write
    issues: write

jobs:
    terraform-plan:
        name: "Terraform Plan"
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: terraform/s3-cloudfront

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_version: 1.6.0

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Terraform Format Check
              id: fmt
              run: terraform fmt -check -recursive
              continue-on-error: true

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan
              id: plan
              run: terraform plan -no-color -input=false -out=tfplan
              continue-on-error: true

            - name: Save Plan
              uses: actions/upload-artifact@v3
              with:
                  name: terraform-plan
                  path: terraform/s3-cloudfront/tfplan
                  retention-days: 5

            - name: Post Plan to PR
              uses: actions/github-script@v6
              env:
                  PLAN: "${{ steps.plan.outputs.stdout }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      const botComment = comments.find(comment => {
                        return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Results')
                      });

                      const output = `## 🏗️ Terraform Plan Results

                      #### 📋 Format: \`${{ steps.fmt.outcome }}\`
                      #### ⚙️ Init: \`${{ steps.init.outcome }}\`
                      #### 🤖 Validate: \`${{ steps.validate.outcome }}\`
                      #### 📊 Plan: \`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`terraform
                      ${process.env.PLAN}
                      \`\`\`

                      </details>

                      ---

                      ### 🎯 Next Steps

                      **To test this infrastructure before merging:**

                      Add the label \`test-apply\` to this PR to run \`terraform apply\`.

                      This will:
                      - ✅ Actually create the infrastructure
                      - ✅ Show you if it works in production
                      - ✅ Post results here
                      - ⚠️ You can then decide to merge or rollback

                      **If apply succeeds**, you can safely merge this PR.

                      ---

                      **Pusher**: @${{ github.actor }}
                      `;

                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: output
                        });
                      } else {
                        await github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: output
                        });
                      }

            - name: Fail if plan failed
              if: steps.plan.outcome == 'failure'
              run: exit 1

    terraform-apply-test:
        name: "Terraform Apply (Test)"
        runs-on: ubuntu-latest
        needs: terraform-plan
        if: contains(github.event.pull_request.labels.*.name, 'test-apply')

        defaults:
            run:
                working-directory: terraform/s3-cloudfront

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_version: 1.6.0

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Terraform Init
              run: terraform init

            - name: Terraform Apply
              id: apply
              run: |
                  terraform apply -auto-approve -input=false | tee apply.log
              continue-on-error: true

            - name: Get Terraform Outputs
              if: steps.apply.outcome == 'success'
              id: outputs
              run: |
                  echo "cloudfront_domain=$(terraform output -raw cloudfront_domain_name)" >> $GITHUB_OUTPUT
                  echo "s3_bucket=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
                  echo "s3_website=$(terraform output -raw s3_website_endpoint)" >> $GITHUB_OUTPUT

            - name: Post Success Comment
              if: steps.apply.outcome == 'success'
              uses: actions/github-script@v6
              with:
                  script: |
                      const output = `## ✅ Test Apply Successful!

                      Infrastructure was successfully created/updated!

                      ### 📊 Outputs
                      - **CloudFront Domain**: \`${{ steps.outputs.outputs.cloudfront_domain }}\`
                      - **S3 Bucket**: \`${{ steps.outputs.outputs.s3_bucket }}\`
                      - **S3 Website**: \`${{ steps.outputs.outputs.s3_website }}\`

                      ### 🌐 Test Your Site
                      - CloudFront: https://${{ steps.outputs.outputs.cloudfront_domain }}
                      - S3 Direct: http://${{ steps.outputs.outputs.s3_website }}

                      ### ✅ Ready to Merge

                      The infrastructure is working! You can now:

                      1. **Test the deployed infrastructure** using the URLs above
                      2. **Merge this PR** when you're satisfied
                      3. The infrastructure will remain as-is after merge

                      **Note**: Since apply already succeeded, merging won't change anything.
                      The infrastructure is already live! 🎉

                      ---

                      **Applied by**: @${{ github.actor }}
                      **Commit**: ${{ github.sha }}
                      `;

                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        body: output
                      });

                      // Add success label
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        labels: ['terraform-apply-success', 'ready-to-merge']
                      });

            - name: Post Failure Comment
              if: steps.apply.outcome == 'failure'
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = require('fs');
                      let applyLog = 'Log file not found';
                      try {
                        applyLog = fs.readFileSync('apply.log', 'utf8').slice(-3000);
                      } catch (error) {
                        applyLog = 'Could not read apply.log';
                      }

                      const output = `## ❌ Test Apply Failed

                      The infrastructure could not be created. **DO NOT MERGE** until this is fixed.

                      ### 🚨 Error Details

                      <details><summary>Show Apply Log (last 3000 characters)</summary>

                      \`\`\`
                      ${applyLog}
                      \`\`\`

                      </details>

                      ### 🛠️ Next Steps

                      1. **Review the error above**
                      2. **Fix the Terraform code**
                      3. **Push new commit** (this will re-run plan)
                      4. **Add \`test-apply\` label again** to test

                      ### ⚠️ Important

                      DO NOT merge this PR until apply succeeds!

                      ---

                      **Failed at**: ${new Date().toISOString()}
                      **Triggered by**: @${{ github.actor }}
                      `;

                      await github.rest.issues.createComment({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        body: output
                      });

                      // Add failure label
                      await github.rest.issues.addLabels({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                        labels: ['terraform-apply-failed', 'do-not-merge']
                      });

            - name: Upload Apply Log
              if: always()
              uses: actions/upload-artifact@v3
              with:
                  name: terraform-test-apply-log
                  path: terraform/s3-cloudfront/apply.log
                  retention-days: 30

            - name: Fail workflow if apply failed
              if: steps.apply.outcome == 'failure'
              run: exit 1
