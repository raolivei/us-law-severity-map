name: Terraform Plan on PR

on:
    pull_request:
        branches:
            - main
            - dev
        paths:
            - "terraform/**"
            - ".github/workflows/terraform-*.yml"

permissions:
    contents: read
    pull-requests: write
    issues: write

jobs:
    terraform-plan:
        name: "Terraform Plan"
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: terraform/s3-cloudfront

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_version: 1.6.0

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v2
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: us-east-1

            - name: Terraform Format Check
              id: fmt
              run: terraform fmt -check -recursive
              continue-on-error: true

            - name: Terraform Init
              id: init
              run: terraform init

            - name: Terraform Validate
              id: validate
              run: terraform validate -no-color

            - name: Terraform Plan
              id: plan
              run: terraform plan -no-color -input=false
              continue-on-error: true

            - name: Update PR with Plan
              uses: actions/github-script@v6
              if: github.event_name == 'pull_request'
              env:
                  PLAN: "${{ steps.plan.outputs.stdout }}"
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
                  script: |
                      // Get existing comments
                      const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                      });

                      // Find existing bot comment
                      const botComment = comments.find(comment => {
                        return comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Results')
                      });

                      // Prepare comment body
                      const output = `## 🏗️ Terraform Plan Results

                      #### 📋 Terraform Format and Style 🖌 \`${{ steps.fmt.outcome }}\`
                      #### ⚙️ Terraform Initialization ⚙️ \`${{ steps.init.outcome }}\`
                      #### 🤖 Terraform Validation 🤖 \`${{ steps.validate.outcome }}\`
                      #### 📊 Terraform Plan 📊 \`${{ steps.plan.outcome }}\`

                      <details><summary>Show Plan</summary>

                      \`\`\`terraform
                      ${process.env.PLAN}
                      \`\`\`

                      </details>

                      ---

                      **Pusher**: @${{ github.actor }}
                      **Action**: \`${{ github.event_name }}\`
                      **Workflow**: \`${{ github.workflow }}\`

                      *To apply this plan, merge this PR and the deployment workflow will run automatically.*`;

                      // Update or create comment
                      if (botComment) {
                        await github.rest.issues.updateComment({
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          comment_id: botComment.id,
                          body: output
                        });
                      } else {
                        await github.rest.issues.createComment({
                          issue_number: context.issue.number,
                          owner: context.repo.owner,
                          repo: context.repo.repo,
                          body: output
                        });
                      }

            - name: Terraform Plan Status
              if: steps.plan.outcome == 'failure'
              run: exit 1
